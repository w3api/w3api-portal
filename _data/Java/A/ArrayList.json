{
    "description": "Un **ArrayList** es una clase que representa un array de elementos que puede ser redimensionado. Es decir, en tiempo de ejecución puede cambiar su tamaño y albergar más o menos elementos.",
    "code": "// ArrayList con tama\u00f1o\nArrayList<String> al = new ArrayList<String>();\n\t\t\n// A\u00f1adir elementos a un ArrayList\nal.add(\"Victor\");\nal.add(\"Luis\");\nal.add(\"Elena\");\t\t\n\t\t\n// Recorrer un ArrayList con un Iterador\nIterator<String> it = al.iterator();\nwhile(it.hasNext())\n System.out.println(it.next());",
    "ldc": [
        {
            "nombre": "Adivinar n\u00fameros con Java",
            "url": "http://lineadecodigo.com/java/adivinar-numeros-con-java/"
        },
        {
            "nombre": "A\u00f1adir elementos al final de un ArrayList",
            "url": "http://lineadecodigo.com/java/anadir-elementos-al-final-de-un-arraylist/"
        },
        {
            "nombre": "Bucle for-each en Java",
            "url": "http://lineadecodigo.com/java/bucle-for-each-en-java/"
        },
        {
            "nombre": "Calcular la moda de una distribuci\u00f3n con Java",
            "url": "http://lineadecodigo.com/java/calcular-la-moda-de-una-distribucion-con-java/"
        },
        {
            "nombre": "Como obtener la ra\u00edz cuadrada de un n\u00famero con Java",
            "url": "http://lineadecodigo.com/java/como-obtener-la-raiz-cuadrada-de-un-numero-con-java/"
        },
        {
            "nombre": "Contar las vocales de un fichero en Java",
            "url": "http://lineadecodigo.com/java/contar-las-vocales-de-un-fichero-en-java/"
        },
        {
            "nombre": "Convertir un array en una lista",
            "url": "http://lineadecodigo.com/java/convertir-un-array-en-una-lista/"
        },
        {
            "nombre": "Convertir una Lista en un Array",
            "url": "http://lineadecodigo.com/java/convertir-una-lista-en-un-array/"
        },
        {
            "nombre": "Crear un ArrayList en Java",
            "url": "http://lineadecodigo.com/java/crear-un-arraylist-en-java/"
        },
        {
            "nombre": "Eliminar todos los elementos de un ArrayList",
            "url": "http://lineadecodigo.com/java/eliminar-todos-los-elementos-de-un-arraylist/"
        },
        {
            "nombre": "Eliminar un elemento de un ArrayList",
            "url": "http://lineadecodigo.com/java/eliminar-un-elemento-de-un-arraylist/"
        },
        {
            "nombre": "Insertar elementos en un ArrayList",
            "url": "http://lineadecodigo.com/java/insertar-elementos-en-un-arraylist/"
        },
        {
            "nombre": "Insertar un elemento dentro de un ArrayList",
            "url": "http://lineadecodigo.com/java/insertar-un-elemento-dentro-de-un-arraylist/"
        },
        {
            "nombre": "Iterar un ArrayList",
            "url": "http://lineadecodigo.com/java/iterar-un-arraylist/"
        },
        {
            "nombre": "Leer n\u00fameros por teclado con Java",
            "url": "http://lineadecodigo.com/java/leer-numeros-teclado-java/"
        },
        {
            "nombre": "Listar una lista en Java",
            "url": "http://lineadecodigo.com/java/listar-una-lista-en-java/"
        },
        {
            "nombre": "N\u00famero de elementos de una Lista en Java",
            "url": "http://lineadecodigo.com/java/numero-de-elementos-de-una-lista-en-java/"
        },
        {
            "nombre": "N\u00famero de elementos en un ArrayList",
            "url": "http://lineadecodigo.com/java/numero-de-elementos-en-un-arraylist/"
        },
        {
            "nombre": "Pruebas de rendimiento con Java Microbenchmark Harness",
            "url": "http://lineadecodigo.com/java/pruebas-de-rendimiento-con-java-microbenchmark-harness/"
        },
        {
            "nombre": "Recorrer un ArrayList",
            "url": "http://lineadecodigo.com/java/recorrer-un-arraylist/"
        },
        {
            "nombre": "Recorrer una lista con ListIterator",
            "url": "http://lineadecodigo.com/java/recorrer-una-lista-con-listiterator/"
        },
        {
            "nombre": "Reemplazar un elemento del ArrayList",
            "url": "http://lineadecodigo.com/java/reemplazar-un-elemento-del-arraylist/"
        }
    ],
    "constructores": [
        {
            "nombre": "ArrayList",
            "code": "// ArrayList con tama\u00f1o\nArrayList<String> al = new ArrayList<String>();\n\t\t\n// A\u00f1adir elementos a un ArrayList\nal.add(\"Victor\");\nal.add(\"Luis\");\nal.add(\"Elena\");\t\t\n\t\t\n// Recorrer un ArrayList con un Iterador\nIterator<String> it = al.iterator();\nwhile(it.hasNext())\n System.out.println(it.next());",
            "description": "El constructor de [`ArrayList`](\\Java\\ArrayList) nos permite crearlo vacío, a partir de los elementos definidos en una colección, es decir, estructuras de tipo [`Collection`](/Java/Collection) o bien indicando una capacidad inicial para el [`ArrayList`](\\Java\\ArrayList)\n\nEn el caso de que la colección que se pasemos como argumento sea null se generará una [`NullPointerException`](\\Java\\NullPointerException). Y si el número con el que inicializamos el contructor del [`ArrayList`](\\Java\\ArrayList) es negativo se genera una excepción [`IllegalArgumentException`](\\Java\\IllegalArgumentException).",
            "parametros": [
                {
                    "nombre": "Collection<? extends E> c",
                    "description": "Colección a partir de la cual queremos crear el [`ArrayList`](\\Java\\ArrayList). La colección puede ser cualquier estructura de datos que extienda de la clase [`Collection`](\\Java\\Collection)."
                },
                {
                    "nombre": "int initialCapacity",
                    "description": "Número de elementos con el cual queremos iniciar el [`ArrayList`](\\Java\\ArrayList)."
                }
            ],
            "ldc": [
                {
                    "nombre": "Adivinar n\u00fameros con Java",
                    "url": "http://lineadecodigo.com/java/adivinar-numeros-con-java/"
                },
                {
                    "nombre": "A\u00f1adir elementos al final de un ArrayList",
                    "url": "http://lineadecodigo.com/java/anadir-elementos-al-final-de-un-arraylist/"
                },
                {
                    "nombre": "Bucle for-each en Java",
                    "url": "http://lineadecodigo.com/java/bucle-for-each-en-java/"
                },
                {
                    "nombre": "Calcular la moda de una distribuci\u00f3n con Java",
                    "url": "http://lineadecodigo.com/java/calcular-la-moda-de-una-distribucion-con-java/"
                },
                {
                    "nombre": "Como obtener la ra\u00edz cuadrada de un n\u00famero con Java",
                    "url": "http://lineadecodigo.com/java/como-obtener-la-raiz-cuadrada-de-un-numero-con-java/"
                },
                {
                    "nombre": "Contar las vocales de un fichero en Java",
                    "url": "http://lineadecodigo.com/java/contar-las-vocales-de-un-fichero-en-java/"
                },
                {
                    "nombre": "Convertir un array en una lista",
                    "url": "http://lineadecodigo.com/java/convertir-un-array-en-una-lista/"
                },
                {
                    "nombre": "Convertir una Lista en un Array",
                    "url": "http://lineadecodigo.com/java/convertir-una-lista-en-un-array/"
                },
                {
                    "nombre": "Crear un ArrayList en Java",
                    "url": "http://lineadecodigo.com/java/crear-un-arraylist-en-java/"
                },
                {
                    "nombre": "Eliminar todos los elementos de un ArrayList",
                    "url": "http://lineadecodigo.com/java/eliminar-todos-los-elementos-de-un-arraylist/"
                },
                {
                    "nombre": "Eliminar un elemento de un ArrayList",
                    "url": "http://lineadecodigo.com/java/eliminar-un-elemento-de-un-arraylist/"
                },
                {
                    "nombre": "Insertar elementos en un ArrayList",
                    "url": "http://lineadecodigo.com/java/insertar-elementos-en-un-arraylist/"
                },
                {
                    "nombre": "Insertar un elemento dentro de un ArrayList",
                    "url": "http://lineadecodigo.com/java/insertar-un-elemento-dentro-de-un-arraylist/"
                },
                {
                    "nombre": "Iterar un ArrayList",
                    "url": "http://lineadecodigo.com/java/iterar-un-arraylist/"
                },
                {
                    "nombre": "Leer n\u00fameros por teclado con Java",
                    "url": "http://lineadecodigo.com/java/leer-numeros-teclado-java/"
                },
                {
                    "nombre": "Listar una lista en Java",
                    "url": "http://lineadecodigo.com/java/listar-una-lista-en-java/"
                },
                {
                    "nombre": "N\u00famero de elementos de una Lista en Java",
                    "url": "http://lineadecodigo.com/java/numero-de-elementos-de-una-lista-en-java/"
                },
                {
                    "nombre": "N\u00famero de elementos en un ArrayList",
                    "url": "http://lineadecodigo.com/java/numero-de-elementos-en-un-arraylist/"
                },
                {
                    "nombre": "Pruebas de rendimiento con Java Microbenchmark Harness",
                    "url": "http://lineadecodigo.com/java/pruebas-de-rendimiento-con-java-microbenchmark-harness/"
                },
                {
                    "nombre": "Recorrer un ArrayList",
                    "url": "http://lineadecodigo.com/java/recorrer-un-arraylist/"
                },
                {
                    "nombre": "Recorrer una lista con ListIterator",
                    "url": "http://lineadecodigo.com/java/recorrer-una-lista-con-listiterator/"
                },
                {
                    "nombre": "Reemplazar un elemento del ArrayList",
                    "url": "http://lineadecodigo.com/java/reemplazar-un-elemento-del-arraylist/"
                }
            ]
        }
    ],
    "metodos": [
        {
            "nombre": "add",
            "description": "El método **add** nos permite añadir un elemento al final del [`ArrayList`](\\Java\\ArrayList) si no le indicamos una posición o bien nos permite añadir un elemento en una posición determinada si le pasamos como parámetro la posición además del elemento.\n\nEn el caso de que haya un elemento en la posición indicada, desplaza dicho elemento y los siguientes una posición a la derecha dentro de [`ArrayList`](\\Java\\ArrayList).\n\nSi la posición a insertar el elemento no está dentro de las posiciones que tiene el [`ArrayList`](\\Java\\ArrayList), es decir, entre 0 y el tamaño del [`ArrayList`](\\Java\\ArrayList), se generará una excepción [`IndexOutOfBoundsException`](\\Java\\IndexOutOfBoundsException).",
            "parametros": [
                {
                    "nombre": "int index",
                    "description": "Posición del [`ArrayList`](\\Java\\ArrayList) dónde queremos insertar el elemento."
                },
                {
                    "nombre": "E e",
                    "description": "Elemento a insertar dentro del [`ArrayList`](\\Java\\ArrayList)"
                },
                {
                    "nombre": "E element",
                    "description": "Elemento a insertar dentro del [`ArrayList`](\\Java\\ArrayList)"
                }
            ],
            "code": "ArrayList<String> al = new ArrayList<String>();\nal.add(\"Victor\");\nal.add(\"Luis\");\nal.add(\"Elena\");\n",
            "ldc": [
                {
                    "nombre": "Adivinar n\u00fameros con Java",
                    "url": "http://lineadecodigo.com/java/adivinar-numeros-con-java/"
                },
                {
                    "nombre": "A\u00f1adir elementos al final de un ArrayList",
                    "url": "http://lineadecodigo.com/java/anadir-elementos-al-final-de-un-arraylist/"
                },
                {
                    "nombre": "Bucle for-each en Java",
                    "url": "http://lineadecodigo.com/java/bucle-for-each-en-java/"
                },
                {
                    "nombre": "Calcular la moda de una distribuci\u00f3n con Java",
                    "url": "http://lineadecodigo.com/java/calcular-la-moda-de-una-distribucion-con-java/"
                },
                {
                    "nombre": "Como obtener la ra\u00edz cuadrada de un n\u00famero con Java",
                    "url": "http://lineadecodigo.com/java/como-obtener-la-raiz-cuadrada-de-un-numero-con-java/"
                },
                {
                    "nombre": "Contar las vocales de un fichero en Java",
                    "url": "http://lineadecodigo.com/java/contar-las-vocales-de-un-fichero-en-java/"
                },
                {
                    "nombre": "Convertir una Lista en un Array",
                    "url": "http://lineadecodigo.com/java/convertir-una-lista-en-un-array/"
                },
                {
                    "nombre": "Crear un ArrayList en Java",
                    "url": "http://lineadecodigo.com/java/crear-un-arraylist-en-java/"
                },
                {
                    "nombre": "Eliminar todos los elementos de un ArrayList",
                    "url": "http://lineadecodigo.com/java/eliminar-todos-los-elementos-de-un-arraylist/"
                },
                {
                    "nombre": "Eliminar un elemento de un ArrayList",
                    "url": "http://lineadecodigo.com/java/eliminar-un-elemento-de-un-arraylist/"
                },
                {
                    "nombre": "Insertar elementos en un ArrayList",
                    "url": "http://lineadecodigo.com/java/insertar-elementos-en-un-arraylist/"
                },
                {
                    "nombre": "Insertar un elemento dentro de un ArrayList",
                    "url": "http://lineadecodigo.com/java/insertar-un-elemento-dentro-de-un-arraylist/"
                },
                {
                    "nombre": "Iterar un ArrayList",
                    "url": "http://lineadecodigo.com/java/iterar-un-arraylist/"
                },
                {
                    "nombre": "Leer n\u00fameros por teclado con Java",
                    "url": "http://lineadecodigo.com/java/leer-numeros-teclado-java/"
                },
                {
                    "nombre": "Listar una lista en Java",
                    "url": "http://lineadecodigo.com/java/listar-una-lista-en-java/"
                },
                {
                    "nombre": "N\u00famero de elementos de una Lista en Java",
                    "url": "http://lineadecodigo.com/java/numero-de-elementos-de-una-lista-en-java/"
                },
                {
                    "nombre": "N\u00famero de elementos en un ArrayList",
                    "url": "http://lineadecodigo.com/java/numero-de-elementos-en-un-arraylist/"
                },
                {
                    "nombre": "Pruebas de rendimiento con Java Microbenchmark Harness",
                    "url": "http://lineadecodigo.com/java/pruebas-de-rendimiento-con-java-microbenchmark-harness/"
                },
                {
                    "nombre": "Recorrer un ArrayList",
                    "url": "http://lineadecodigo.com/java/recorrer-un-arraylist/"
                },
                {
                    "nombre": "Recorrer una lista con ListIterator",
                    "url": "http://lineadecodigo.com/java/recorrer-una-lista-con-listiterator/"
                },
                {
                    "nombre": "Reemplazar un elemento del ArrayList",
                    "url": "http://lineadecodigo.com/java/reemplazar-un-elemento-del-arraylist/"
                }
            ]
        },
        {
            "nombre": "addAll",
            "description": "Método que nos permite añadir una colección, cualquier estructura del tipo [`Collection`](\\Java\\Collection) al final o en un punto en concreto de un [`ArrayList`](\\Java\\ArrayList).\n\nEn el caso de que la colección sea nula se generará una excpción [`NullPointerException`](\\Java\\NullPointerException). Y si la posición que indicamos para poder añadir la colección es menor de 0 o mayor del tamaño del [`ArrayList`](\\Java\\ArrayList) se generará una excepción [`IndexOutOfBoundsExcepcion`](\\Java\\IndexOutOfBoundsExcepcion).",
            "parametros": [
                {
                    "nombre": "Collection<? extends E> c",
                    "description": "Coleeción que queremos añadir al [`ArrayList`](\\Java\\ArrayList)"
                },
                {
                    "nombre": "int index",
                    "description": "Posición del [`ArrayList`](\\Java\\ArrayList) en la que queremos insertar la colección."
                }
            ],
            "code": "// ArrayList con tama\u00f1o\nArrayList<String> al = new ArrayList<String>();\n\t\t\n// A\u00f1adir elementos a un ArrayList\nal.add(\"Victor\");\nal.add(\"Luis\");\nal.add(\"Elena\");\t\t\n\t\t\nVector<String> vector = new Vector<String>();\nvector.add(\"Irene\");\nvector.add(\"Mar\u00eda\");\n\t\t\n// A\u00f1adir elementos al final del ArrayList\n// Es una colecci\u00f3n\nal.addAll(vector);\n",
            "ldc": [
                {
                    "nombre": "A\u00f1adir elementos al final de un ArrayList",
                    "url": "http://lineadecodigo.com/java/anadir-elementos-al-final-de-un-arraylist/"
                }
            ]
        },
        {
            "nombre": "clear",
            "description": "Elimina todos los elementos de un [`ArrayList`](\\Java\\ArrayList).",
            "code": "ArrayList<String> al = new ArrayList<String>();\nal.add(\"Victor\");\nal.add(\"Luis\");\nal.add(\"Elena\");\n\nSystem.out.println(\"La lista contiene \"+al.size()+\" elementos\");\n\t\t\n// Eliminamos todos los elementos\nal.clear();\n\t    \nSystem.out.println(\"La lista contiene \"+al.size()+\" elementos\");\n",
            "ldc": [
                {
                    "nombre": "Calcular la moda de una distribuci\u00f3n con Java",
                    "url": "http://lineadecodigo.com/java/calcular-la-moda-de-una-distribucion-con-java/"
                },
                {
                    "nombre": "Eliminar todos los elementos de un ArrayList",
                    "url": "http://lineadecodigo.com/java/eliminar-todos-los-elementos-de-un-arraylist/"
                }
            ]
        },
        {
            "nombre": "clone",
            "description": "Mediante el método **clone** podemos realizar una copia de un [`ArrayList`](\\Java\\ArrayList).",
            "code": "ArrayList<String> list = new ArrayList<String>();\n\t   \n// Añadimos elementos\nlist.add(\"Marta\");\nlist.add(\"Luis\");\nlist.add(\"Francisco\");\n\n// Obtenemos un Iterador y recorremos la lista.\nIterator<String> iter = list.iterator();\nwhile (iter.hasNext())\n  System.out.println(iter.next());\n\nArrayList<String> list2 = (ArrayList<String>)list.clone();\n\n// Obtenemos un Iterador y recorremos la lista.\niter = list2.iterator();\nwhile (iter.hasNext())\n    System.out.println(iter.next());",
            "ldc": []
        },
        {
            "nombre": "contains",
            "description": "El método **contains** nos devuelve `true` en el caso de que el elemento pasado como parámetro se encuentra dentro del [`ArrayList`](\\Java\\ArrayList). En caso contrario se devuelve `false`.",
            "code": "ArrayList<Integer> misnumeros = new ArrayList<Integer>(10);\nScanner reader = new Scanner(System.in);  \n\nfor (int x=0;x<10;x++) {\n    System.out.println(\"Inserte un número\");\n    misnumeros.add(reader.nextInt());\n}\n\nSystem.out.println(\"Has cargado los siguientes números\");\n\nfor (int x=0;x<misnumeros.size();x++){\n    System.out.println(misnumeros.get(x));\n}\n\nSystem.out.println(\"Busca un número, 0 para salir\");\n\nint numeroBuscar = reader.nextInt();  \n\nwhile (numeroBuscar!=0) {\n    if (misnumeros.contains(numeroBuscar)) {\n        System.out.println(\"Contiene el número \" + numeroBuscar);\n    } else {\n        System.out.println(\"No contiene el número \" + numeroBuscar);\n    }\n\n    System.out.println(\"Busca un número, 0 para salir\");\n\n    numeroBuscar = reader.nextInt();\n}\n\nSystem.out.println(\"Fin del juego\");\n\nreader.close();",
            "parametros": [
                {
                    "nombre": "Object o",
                    "description": "Objeto que buscamos dentro del [`ArrayList`](\\Java\\ArrayList) para ver si exsite."
                }
            ],
            "ldc": [
                {
                    "nombre": "Adivinar n\u00fameros con Java",
                    "url": "http://lineadecodigo.com/java/adivinar-numeros-con-java/"
                },
                {
                    "nombre": "Calcular la moda de una distribuci\u00f3n con Java",
                    "url": "http://lineadecodigo.com/java/calcular-la-moda-de-una-distribucion-con-java/"
                }
            ]
        },
        {
            "nombre": "ensureCapacity",
            "description": "Incrementa la capacidad del [`ArrayList`](\\Java\\ArrayList) y asegura que puede almancenar, al menos, la capacidad indicada como parámetro.\n\nEs una buena práctica utilizar el método **ensureCapacity** antes de insertar una gran cantidad de elementos dentro de un [`ArrayList`](\\Java\\ArrayList).",
            "code": "ArrayList<String> list = new ArrayList<String>();\n\n// Aseguramos la capacidad para 3 elementos\nlist.ensureCapacity(3);\n\nSystem.out.println(\"El tamaño del ArrayList es \" + list.size());\n\n// Añadimos elementos\nlist.add(\"Marta\");\nlist.add(\"Luis\");\nlist.add(\"Francisco\");\n\nSystem.out.println(\"El tamaño del ArrayList es \" + list.size());",
            "parametros": [
                {
                    "nombre": "int minCapacity",
                    "description": "Número mínimo de elementos de los que queremos asegurar la capacidad dentro del [`ArrayList`](\\Java\\ArrayList)"
                }
            ],
            "ldc": []
        },
        {
            "nombre": "forEach",
            "description": "Mediante el método **foreach** podemos crear un consumidor, representado por la clase [`Consumer`](\\Java\\Consumer) que se ejecute por cada elemento que hay en el [`ArrayList`](\\Java\\ArrayList). Este consumidor es un **interface funcional** y por lo tanto acepta **funciones lambda** o una referencia a un método.\n\nSi la acción pasada en `null` se lanzará una [`NullPointerException`](\\Java\\NullPointerException).",
            "code": "ArrayList<String> list = new ArrayList<String>();\n\n// Añadimos elementos\nlist.add(\"Marta\");\nlist.add(\"Luis\");\nlist.add(\"Francisco\");\n\nlist.forEach((n) -> System.out.println(n));",
            "parametros": [
                {
                    "nombre": "Consumer<? super E> action",
                    "description": "Interface funcional que puede ser una *función lambda* o una *invocación a un método* y que se ejecuta por cada elemento del [`ArrayList`](\\Java\\ArrayList)."
                }
            ],
            "ldc": []
        },
        {
            "nombre": "get",
            "description": "Devuelve un elemento del [`ArrayList`](\\Java\\ArrayList) de la posición indicada como parámetro del método **get**.\n\nEn el caso de que indiquemos una posición que no corresponda con alguno de los elementos del [`ArrayList`](\\Java\\ArrayList), es decir, menor que 0 o mayor que el tamaño del [`ArrayList`](\\Java\\ArrayList), se producirá una excepción [`IndexOutOfBoundsException`](\\Java\\IndexOutOfBoundsException).",
            "parametros": [
                {
                    "nombre": "int index",
                    "description": "Posicón del [`ArrayList`](\\Java\\ArrayList) de la cual queremos recuperar el elemento."
                }
            ],
            "code": "// ArrayList con tama\u00f1o\nArrayList<String> al = new ArrayList<String>();\n\t\t\n// A\u00f1adir elementos a un ArrayList\nal.add(\"Victor\");\nal.add(\"Luis\");\nal.add(\"Elena\");\t\t\n\t\t\n// Recorremos el Array\nfor(int x=0;x<al.size();x++) {\n System.out.println(al.get(x));\n}\n",
            "ldc": [
                {
                    "nombre": "A\u00f1adir elementos al final de un ArrayList",
                    "url": "http://lineadecodigo.com/java/anadir-elementos-al-final-de-un-arraylist/"
                },
                {
                    "nombre": "Calcular la moda de una distribuci\u00f3n con Java",
                    "url": "http://lineadecodigo.com/java/calcular-la-moda-de-una-distribucion-con-java/"
                },
                {
                    "nombre": "Como obtener la ra\u00edz cuadrada de un n\u00famero con Java",
                    "url": "http://lineadecodigo.com/java/como-obtener-la-raiz-cuadrada-de-un-numero-con-java/"
                },
                {
                    "nombre": "Insertar elementos en un ArrayList",
                    "url": "http://lineadecodigo.com/java/insertar-elementos-en-un-arraylist/"
                },
                {
                    "nombre": "N\u00famero de elementos en un ArrayList",
                    "url": "http://lineadecodigo.com/java/numero-de-elementos-en-un-arraylist/"
                },
                {
                    "nombre": "Pruebas de rendimiento con Java Microbenchmark Harness",
                    "url": "http://lineadecodigo.com/java/pruebas-de-rendimiento-con-java-microbenchmark-harness/"
                },
                {
                    "nombre": "Recorrer un ArrayList",
                    "url": "http://lineadecodigo.com/java/recorrer-un-arraylist/"
                }
            ]
        },
        {
            "nombre": "indexOf",
            "description": "Nos devuelve el índice que corresponde con la posición del [`ArrayList`](\\Java\\ArrayList) del elemento que pasamos como parámetro. De esta forma el método **indexOf** nos permite buscar un elemento en el [`ArrayList`](\\Java\\ArrayList). En el caso de que elemento no se encuentre dentro del [`ArrayList`](\\Java\\ArrayList) se devolverá un valor de -1.",
            "code": "ArrayList<String> list = new ArrayList<String>();\n\nlist.add(\"Marta\");\nlist.add(\"Luis\");\nlist.add(\"Francisco\");\n\nString sElementoaBuscar = \"Luis\";\n\nif (list.indexOf(sElementoaBuscar) >0)\n    System.out.println(\"El elemento \" + sElementoaBuscar + \" está en la lista\");\nelse\n    System.out.println(\"El elemento \" + sElementoaBuscar + \" NO está en la lista\");",
            "parametros": [
                {
                    "nombre": "Object o",
                    "description": "Elemento que queremos buscar dentro del [`ArrayList`](\\Java\\ArrayList)"
                }
            ],
            "ldc": []
        },
        {
            "nombre": "isEmpty",
            "description": "Método que comprueba que si el [`ArrayList`](\\Java\\ArrayList) tiene elementos, en ese caso devolverá un `false`, o está vacío, en ese caso devolverá un `true`.",
            "code": "// Definimos una ArrayList\nArrayList<String> list = new ArrayList<String>();\n\n// Lectura por consola\nScanner reader = new Scanner(System.in);\nString sTexto = \"\";\n\n// Añadimos elementos\nlist.add(\"Elemento\");\nlist.add(\"Elemento\");\nlist.add(\"Elemento\");\n\nSystem.out.println(\"Escriba ADD para añadir un elemento o DEL para borrarlo. FIN para terminar\");\n\ndo {\n    sTexto = reader.next();\n    \n    if (sTexto.equals(\"ADD\"))\n        list.add(\"Elemento\");\n    else if (sTexto.equals(\"DEL\"))\n        if (!list.isEmpty())\n            list.remove(list.size()-1);\n        else\n            System.out.println(\"La lista está vacía. No puedes borrar más elementos.\");\n    \n    System.out.println(\"Hay \" + list.size() + \" elementos en la lista\");\n\n} while(!sTexto.equals(\"FIN\"));\n\nreader.close();",
            "ldc": []
        },
        {
            "nombre": "iterator",
            "description": "El método **iterator** nos devuelve un iterador sobre el [`ArrayList`](/Java/ArrayList) que nor permitirá recorrerlo e iterar sobre todos sus elemnetos.",
            "code": "// ArrayList con tama\u00f1o\nArrayList<String> al = new ArrayList<String>();\n\t\t\n// A\u00f1adir elementos a un ArrayList\nal.add(\"Victor\");\nal.add(\"Luis\");\nal.add(\"Elena\");\t\t\n\t\nIterator<String> it = al.iterator();\nwhile(it.hasNext())\n System.out.println(it.next());\n",
            "ldc": [
                {
                    "nombre": "Calcular la moda de una distribuci\u00f3n con Java",
                    "url": "http://lineadecodigo.com/java/calcular-la-moda-de-una-distribucion-con-java/"
                },
                {
                    "nombre": "Eliminar un elemento de un ArrayList",
                    "url": "http://lineadecodigo.com/java/eliminar-un-elemento-de-un-arraylist/"
                },
                {
                    "nombre": "Iterar un ArrayList",
                    "url": "http://lineadecodigo.com/java/iterar-un-arraylist/"
                },
                {
                    "nombre": "Listar una lista en Java",
                    "url": "http://lineadecodigo.com/java/listar-una-lista-en-java/"
                },
                {
                    "nombre": "Reemplazar un elemento del ArrayList",
                    "url": "http://lineadecodigo.com/java/reemplazar-un-elemento-del-arraylist/"
                }
            ]
        },
        {
            "nombre": "lastIndexOf",
            "description": "Al igual que el método [`indexOf`](/Java/ArrayList/indexOf) nos buscaba la primera ocurrencia de un elemento dentro del [`ArrayList`](/Java/ArrayList), el método **latIndexOf** nos identifica la última posición en la que se encuentra el elemento pasado por parámetro. En el caso de que el elemento se encuentre en el [`ArrayList`](/Java/ArrayList) se devuelve el índice en el cual se encuentra, en el caso contrario se devuelve un valor de -1 que indicará que elemento no se encuentra en el [`ArrayList`](/Java/ArrayList).",
            "code": "ArrayList<String> list = new ArrayList<String>();\n\n// Añadimos elementos\nlist.add(\"Marta\");\nlist.add(\"Luis\");\nlist.add(\"Francisco\");\nlist.add(\"Luis\");\nlist.add(\"Sonsoles\");\nlist.add(\"José\");\n\nString sElementoaBuscar = \"Luis\";\n\nint posicion = list.lastIndexOf(sElementoaBuscar);\n\nif (posicion >0)\n    System.out.println(\"El último elemento \" + sElementoaBuscar + \" está en la lista en la posición \" + posicion+1);\nelse\n    System.out.println(\"El elemento \" + sElementoaBuscar + \" NO está en la lista\");",
            "parametros": [
                {
                    "nombre": "Object o",
                    "description": "Elemento que queremos buscar en el [`ArrayList`](/Java/ArrayList)."
                }
            ],
            "ldc": []
        },
        {
            "nombre": "listIterator",
            "description": "El método **listIterator** devuelve un iterador sobre los elementos del [`ArrayList`](/Java/ArrayList) en la posición indicada como parámetro. En el caso que no indiquemos índice se devolverá un iterador a la primera posición. Y en el caso de que el índice pasado por parámetro no corresponda con una posición del [`ArrayList`](/Java/ArrayList), es decir, que sea menor que cero o mayor que el tamaño del [`ArrayList`](/Java/ArrayList), se devolverá una excepción [`IndexOutOfBoundsException`](/Java/IndexOutOfBoundsException).",
            "parametros": [
                {
                    "nombre": "int index",
                    "description": "Posición dentro del [`ArrayList`](/Java/ArrayList) desde donde posicionaremos el iterador."
                }
            ],
            "code": "// ArrayList con tama\u00f1o\nArrayList<String> al = new ArrayList<String>();\n\t\t\n// A\u00f1adir elementos a un ArrayList\nal.add(\"Victor\");\nal.add(\"Luis\");\nal.add(\"Elena\");\t\t\n\t\nListIterator<String> it = al.listIterator();\nwhile(it.hasNext())\n System.out.println(it.next());\n\t    \nwhile(it.hasPrevious())\n System.out.println(it.previous());\n",
            "ldc": [
                {
                    "nombre": "Bucle for-each en Java",
                    "url": "http://lineadecodigo.com/java/bucle-for-each-en-java/"
                },
                {
                    "nombre": "Recorrer una lista con ListIterator",
                    "url": "http://lineadecodigo.com/java/recorrer-una-lista-con-listiterator/"
                }
            ]
        },
        {
            "nombre": "remove",
            "description": "Elimina un elemento dentro de un [`ArrayList`](/Java/ArrayList). Bien indicando la posición en la que se encuentra el elemento. O bien, por coincidencia con el objeto pasado como parámetro. En este caso se eliminará únicamente la primera ocurrencia que coincida con el elemento pasado como parámetro.\n\nEn el caso que indiquemos un índice, si este está fuera del tango del [`ArrayList`](/Java/ArrayList), es decir, menor que 0 o mayor que el tamaño del [`ArrayList`](/Java/ArrayList) se generará una excepción [`IndexOutOfBoundsException`](/Java/IndexOutOfBoundsException).",
            "parametros": [
                {
                    "nombre": "Object o",
                    "description": "Elemento a eliminar del [`ArrayList`](/Java/ArrayList)."
                },
                {
                    "nombre": "int index",
                    "description": "Posición del [`ArrayList`](/Java/ArrayList) de la que queremos eliminar su elemento"
                }
            ],
            "code": "// ArrayList con tama\u00f1o\nArrayList<String> al = new ArrayList<String>();\n\t\t\n// A\u00f1adir elementos a un ArrayList\nal.add(\"Victor\");\nal.add(\"Luis\");\nal.add(\"Elena\");\t\t\n\t\t\n// Recorrer un ArrayList con un Iterador\nIterator<String> it = al.iterator();\nwhile(it.hasNext())\n System.out.println(it.next());\n\t\t\n// Eliminamos el segundo elemento\nal.remove(1);\n\nit = al.iterator();\nwhile(it.hasNext())\n System.out.println(it.next());\n",
            "ldc": [
                {
                    "nombre": "Eliminar un elemento de un ArrayList",
                    "url": "http://lineadecodigo.com/java/eliminar-un-elemento-de-un-arraylist/"
                }
            ]
        },
        {
            "nombre": "removeAll",
            "code": "// ArrayList con tamaño\nArrayList<String> al = new ArrayList<String>();\n\t\t\t\t\n// Añadir elementos a un ArrayList\nal.add(\"1\");\nal.add(\"2\");\nal.add(\"3\");\nal.add(\"1\");\nal.add(\"4\");\nal.add(\"5\");\nal.add(\"1\");\nal.add(\"6\");\nal.add(\"7\");\n                    \n// Eliminamos todas las ocurrencias del 1\n// while(al.remove(\"1\"));\n\nArrayList<String> eliminar = new ArrayList<String>();\neliminar.add(\"1\");\nal.removeAll(eliminar);\n\n// Recorrer un ArrayList con un Iterador\nIterator<String> it = al.iterator();\nwhile(it.hasNext())\n    System.out.println(it.next());",
            "description": "El método **removeAll** eliminan de un [`ArrayList`](/Java/ArrayList) todos los elementos pasados en la colección que se indica en el parámetro. En el caso que se eliminen elementos de la lista se devolverá `true`, en caso contrario se devolverá `false`.\n\nSi la colección que se pasa como parámetro es de un tipo diferente de la lista sobre la que se ejecuta el **removeAll** se genera una excepción [`ClassCastException`](/Java/ClassCastException). Por otro lado si la colección que se pasa como parámtero es nula o bien la lista contiene elementos `null` y la que pasamos como parámetro no soporta los elementos `null` se generará una excepción [`NullPointerException`](/Java/NullPointerException).",
            "parametros": [
                {
                    "nombre": "Collection<?> c",
                    "description": "Colección que contiene los elementos que hay que eliminar del [`ArrayList`](/Java/ArrayList)."
                }
            ],
            "ldc": []
        },
        {
            "nombre": "removeIf",
            "description": "Con el método **removeIf** podemos eliminar todos los elementos de [`ArrayList`](/Java/ArrayList) que coincidan con el predicado pasado como parámetro. Nos devolverá `true` si se eliminan elementos y `false` en el caso contrario.\n\nEn el caso de que el predicado sea nulo se lanzará una excepción [`NullPointerException`](/Java/NullPointerException).",
            "code": "// ArrayList con tamaño\nArrayList<Integer> numeros = new ArrayList<Integer>();\n\t\t\t\t\n// Añadir elementos a un ArrayList\nnumeros.add(1);\nnumeros.add(2);\nnumeros.add(3);\nnumeros.add(4);\nnumeros.add(5);\nnumeros.add(6);\nnumeros.add(7);\nnumeros.add(8);\nnumeros.add(9);\n                    \nnumeros.removeIf(n -> (n%2 == 0));\n\n// Recorrer un ArrayList con un Iterador\nIterator<Integer> it = numeros.iterator();\nwhile(it.hasNext())\n    System.out.println(it.next());",
            "parametros": [
                {
                    "nombre": "Predicate<? super E> filter",
                    "description": "Predicado que nos permitirá filtrar los elementos que queremos elimianr del [`ArrayList`](/Java/ArrayList)."
                }
            ],
            "ldc": []
        },
        {
            "nombre": "removeRange",
            "description": "Método que nos permite eliminar los elementos de un [`ArrayList`](/Java/ArrayList) en un rango que delimitaremos con los índices indicados como parámetros del método.\n\nEn el caso de que el rango esté fuera de los límites del [`ArrayList`](/Java/ArrayList) se lanzará una excpeción [`IndexOutOfBoundsException`](/Java/IndexOutOfBoundsException).",
            "code": "import java.util.ArrayList;\nimport java.util.Iterator;\n\npublic class EliminarRangoLista extends ArrayList<Integer> {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\t// ArrayList con tamaño\n\t\tEliminarRangoLista numeros = new EliminarRangoLista();\n\t\t\t\t\n\t\t// Añadir elementos a un ArrayList\n\t\tnumeros.add(1);\n\t\tnumeros.add(2);\n\t\tnumeros.add(3);\n\t\tnumeros.add(4);\n\t\tnumeros.add(5);\n\t\tnumeros.add(6);\n\t\tnumeros.add(7);\n\t\tnumeros.add(8);\n\t\tnumeros.add(9);\n\t\t\t    \t\t\t\n\t\tnumeros.removeRange(3,6);\n\n\t\t// Recorrer un ArrayList con un Iterador\n\t\tIterator<Integer> it = numeros.iterator();\n\t\twhile(it.hasNext())\n\t\t\tSystem.out.println(it.next());\n\t\n\n\t}\n}",
            "parametros": [
                {
                    "nombre": "int fromIndex",
                    "description": "Inicio del índice para el borrado"
                },
                {
                    "nombre": "int toIndex",
                    "description": "Final del índice para el borrado"
                }
            ],
            "ldc": []
        },
        {
            "nombre": "retainAll",
            "description": "El método **retainAll** nos permite eliminar todos los elementos de la lista que no le indiquemos en la colección que pasamos como parámetro al método.\n\nSi la colección que se pasa como parámetro es de un tipo diferente de la lista sobre la que se ejecuta el método **retainAll** se genera una excepción [`ClassCastException`](/Java/ClassCastException). Por otro lado si la colección que se pasa como parámtero es nula o bien la lista contiene elementos null y la que pasamos como parámetro no soporta los elementos null se generará una excepción [`NullPointerException`](Java/NullPointerException).",
            "code": "// ArrayList con tamaño\nArrayList<Integer> numeros = new ArrayList<Integer>();\n\t\t\t\t\n// Añadir elementos a un ArrayList\nnumeros.add(1);\nnumeros.add(2);\nnumeros.add(3);\nnumeros.add(4);\nnumeros.add(5);\nnumeros.add(6);\nnumeros.add(7);\nnumeros.add(8);\nnumeros.add(9);\n                    \nArrayList<Integer> mantener = new ArrayList<Integer>();\nmantener.add(2);\nmantener.add(4);\n\nnumeros.retainAll(mantener);\n\n// Recorrer un ArrayList con un Iterador\nIterator<Integer> it = numeros.iterator();\nwhile(it.hasNext())\n    System.out.println(it.next());",
            "parametros": [
                {
                    "nombre": "Collection<?> c",
                    "description": "Colección con los elementos que queremos mantener en la lista"
                }
            ],
            "ldc": []
        },
        {
            "nombre": "set",
            "description": "Método que permite sustituir un elemento por otro dentro de un [`ArrayList`](/Java/ArrayList). Así al método tenemos que indicarle la posición en la que queremos hacer la sustitución del elemento y el nuevo elemento.\n\nEn el caso que la posición del [`ArrayList`](/Java/ArrayList) esté fuera de su rango, es decir, menor que cero o mayor que el tamaño del [`ArrayList`](/Java/ArrayList) se elevará una excepción [`IndexOutOfBoundsException`](/Java/IndexOutOfBoundsException).",
            "parametros": [
                {
                    "nombre": "int index",
                    "description": "Posición del [`ArrayList`](/Java/ArrayList) en la que queremos hacer la sustitución."
                },
                {
                    "nombre": "E element",
                    "description": "Nuevo elemento a añadir al [`ArrayList`](/Java/ArrayList)."
                }
            ],
            "code": "ArrayList<String> al = new ArrayList<String>();\nal.add(\"Victor\");\nal.add(\"Luis\");\nal.add(\"Elena\");\n\nIterator<String> it = al.iterator();\nwhile(it.hasNext())\n System.out.println(it.next());\n\t\t\n// Eliminamos el primer elemento\n al.set(2,\"Teresa\");\n\t    \nit = al.iterator();\nwhile(it.hasNext())\n System.out.println(it.next());\n",
            "ldc": [
                {
                    "nombre": "A\u00f1adir elementos al final de un ArrayList",
                    "url": "http://lineadecodigo.com/java/anadir-elementos-al-final-de-un-arraylist/"
                },
                {
                    "nombre": "Bucle for-each en Java",
                    "url": "http://lineadecodigo.com/java/bucle-for-each-en-java/"
                },
                {
                    "nombre": "Como obtener la ra\u00edz cuadrada de un n\u00famero con Java",
                    "url": "http://lineadecodigo.com/java/como-obtener-la-raiz-cuadrada-de-un-numero-con-java/"
                },
                {
                    "nombre": "Insertar elementos en un ArrayList",
                    "url": "http://lineadecodigo.com/java/insertar-elementos-en-un-arraylist/"
                },
                {
                    "nombre": "N\u00famero de elementos en un ArrayList",
                    "url": "http://lineadecodigo.com/java/numero-de-elementos-en-un-arraylist/"
                },
                {
                    "nombre": "Reemplazar un elemento del ArrayList",
                    "url": "http://lineadecodigo.com/java/reemplazar-un-elemento-del-arraylist/"
                }
            ]
        },
        {
            "nombre": "size",
            "description": "Devuelve el tama\u00f1o, número de elementos, del [`ArrayList`](/Java/ArrayList)",
            "code": "// ArrayList con tama\u00f1o\nArrayList<String> al = new ArrayList<String>();\n\t\t\n// A\u00f1adir elementos a un ArrayList\nal.add(\"Victor\");\nal.add(\"Luis\");\nal.add(\"Elena\");\t\t\n\t\t\n// Recorremos el Array\nfor(int x=0;x<al.size();x++) {\n System.out.println(al.get(x));\n}\n",
            "ldc": [
                {
                    "nombre": "A\u00f1adir elementos al final de un ArrayList",
                    "url": "http://lineadecodigo.com/java/anadir-elementos-al-final-de-un-arraylist/"
                },
                {
                    "nombre": "Bucle for-each en Java",
                    "url": "http://lineadecodigo.com/java/bucle-for-each-en-java/"
                },
                {
                    "nombre": "Calcular la moda de una distribuci\u00f3n con Java",
                    "url": "http://lineadecodigo.com/java/calcular-la-moda-de-una-distribucion-con-java/"
                },
                {
                    "nombre": "Convertir una Lista en un Array",
                    "url": "http://lineadecodigo.com/java/convertir-una-lista-en-un-array/"
                },
                {
                    "nombre": "Eliminar todos los elementos de un ArrayList",
                    "url": "http://lineadecodigo.com/java/eliminar-todos-los-elementos-de-un-arraylist/"
                },
                {
                    "nombre": "Insertar elementos en un ArrayList",
                    "url": "http://lineadecodigo.com/java/insertar-elementos-en-un-arraylist/"
                },
                {
                    "nombre": "N\u00famero de elementos de una Lista en Java",
                    "url": "http://lineadecodigo.com/java/numero-de-elementos-de-una-lista-en-java/"
                },
                {
                    "nombre": "N\u00famero de elementos en un ArrayList",
                    "url": "http://lineadecodigo.com/java/numero-de-elementos-en-un-arraylist/"
                },
                {
                    "nombre": "Pruebas de rendimiento con Java Microbenchmark Harness",
                    "url": "http://lineadecodigo.com/java/pruebas-de-rendimiento-con-java-microbenchmark-harness/"
                },
                {
                    "nombre": "Recorrer un ArrayList",
                    "url": "http://lineadecodigo.com/java/recorrer-un-arraylist/"
                }
            ]
        },
        {
            "nombre": "spliterator",
            "description": "El método **spliterator** nos devuelve un [`Spliterator`](/Java/Spliterator) sobre los elementos del [`ArrayList`](/Java/ArrayList). De esa manera podemos procesarlos de forma paralela.",
            "code": "// ArrayList con tamaño\nArrayList<Integer> lista = new ArrayList<Integer>(Arrays.asList(1,2,3,4,5,6,7,8,9,10));\n\nSpliterator<Integer> si = lista.spliterator();\nsi.forEachRemaining(n -> System.out.println(n));",
            "ldc": []
        },
        {
            "nombre": "subList",
            "description": "Mediante el método **subList** podemos extraer una porción de la lista actual, delimitada por los parámetros inicio y fin, para crear una nueva lista.\n\nEn el caso de que los índices pasados como parámetro no estén dentro del tamaño de la lista, es decir, menor que 0 y mayor que el tamaño del [`ArrayList`](/Java/ArrayList) se generará una excepción [`IndexOutOfBoundsException`](/Java/IndexOutOfBoundsException). Por otro lado, si el parámetro `fromIndex` es mayor que el paráemtro `toIndex` se generará una excepción [`IllegalArgumentException`](/Java/IllegalArgumentException).",
            "code": "ArrayList<Integer> lista = new ArrayList<Integer>(Arrays.asList(1,2,3,4,5,6,7,8,9,10));\n\nList<Integer> sublista = lista.subList(5, lista.size());\n\nIterator<Integer> it = sublista.iterator();\nwhile(it.hasNext())\n    System.out.println(it.next());",
            "parametros": [
                {
                    "nombre": "int fromIndex",
                    "description": "Índice del elemento inicial de la sublista."
                },
                {
                    "nombre": "int toIndex",
                    "description": "Índice del elemento final de la sublista."
                }
            ],
            "ldc": []
        },
        {
            "nombre": "toArray",
            "description": "El método **toArray** nos permite convertir un [`ArrayList`](Java/ArrayList) en un `array` con todos los elementos que cotiene el [`ArrayList`](Java/ArrayList). El parámetro del método es el `array` sobre el que queremos convertir el [`ArrayList`](Java/ArrayList).",
            "code": "List<String> milista = new ArrayList<String>();\nmilista.add(\"Elemento 1\");\nmilista.add(\"Elemento 2\");\n\nString[] miarray = new String[milista.size()];\nmiarray = milista.toArray(miarray);\n\nfor(String s : miarray)\n    System.out.println(s);",
            "parametros": [
                {
                    "nombre": "T[] a",
                    "description": "Array sobre el que queremos convertir el [`ArrayList`](Java/ArrayList)."
                }
            ],
            "ldc": [
                {
                    "nombre": "Convertir una Lista en un Array",
                    "url": "http://lineadecodigo.com/java/convertir-una-lista-en-un-array/"
                }
            ]
        },
        {
            "nombre": "trimToSize",
            "description": "El método **trimToSize** ajusta la capacidad del [`ArrayList`](/Java/ArrayList) al número de elementos que este tiene. El [`ArrayList`](/Java/ArrayList), al ser dinámico, siempre tiene preparado una capacida de 1,5 los elementos que tiene, para poder añadir nuevos elementos. Al utilizar **trimToSize** ajusta esta capacidad y ahorra espacio.",
            "code": "ArrayList<String> al = new ArrayList<String>();\n\n// Añadir elementos a un ArrayList\nal.add(\"Victor\");\nal.add(\"Luis\");\nal.add(\"Marta\");\n\n// Se ajusta el tamaño. Por defecto Java tiene preparado 1,5 la capacidad actual\nal.trimToSize();\n\nSystem.out.println(al);\nSystem.out.println(al.size());",
            "ldc": []
        }
    ]
}